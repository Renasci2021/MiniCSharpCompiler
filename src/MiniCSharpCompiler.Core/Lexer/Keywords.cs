using System.Collections.Generic;
using Microsoft.CodeAnalysis.CSharp;

namespace MiniCSharpCompiler.Core.Lexer
{
    public static class Keywords
    {
        public static readonly Dictionary<string, SyntaxKind> KeywordDictionary = new Dictionary<string, SyntaxKind>
        {
            { "abstract", SyntaxKind.AbstractKeyword },
            { "as", SyntaxKind.AsKeyword },
            { "async", SyntaxKind.AsyncKeyword },
            { "await", SyntaxKind.AwaitKeyword},
            { "base", SyntaxKind.BaseKeyword },
            { "bool", SyntaxKind.BoolKeyword },
            { "break", SyntaxKind.BreakKeyword },
            { "byte", SyntaxKind.ByteKeyword },
            { "case", SyntaxKind.CaseKeyword },
            { "catch", SyntaxKind.CatchKeyword },
            { "char", SyntaxKind.CharKeyword },
            { "checked", SyntaxKind.CheckedKeyword },
            { "class", SyntaxKind.ClassKeyword },
            { "const", SyntaxKind.ConstKeyword },
            { "continue", SyntaxKind.ContinueKeyword },
            { "decimal", SyntaxKind.DecimalKeyword },
            { "default", SyntaxKind.DefaultKeyword },
            { "delegate", SyntaxKind.DelegateKeyword },
            { "do", SyntaxKind.DoKeyword },
            { "double", SyntaxKind.DoubleKeyword },
            { "else", SyntaxKind.ElseKeyword },
            { "enum", SyntaxKind.EnumKeyword },
            { "event", SyntaxKind.EventKeyword },
            { "explicit", SyntaxKind.ExplicitKeyword },
            { "extern", SyntaxKind.ExternKeyword },
            { "false", SyntaxKind.FalseKeyword },
            { "finally", SyntaxKind.FinallyKeyword },
            { "fixed", SyntaxKind.FixedKeyword },
            { "float", SyntaxKind.FloatKeyword },
            { "for", SyntaxKind.ForKeyword },
            { "foreach", SyntaxKind.ForEachKeyword },
            { "goto", SyntaxKind.GotoKeyword },
            { "if", SyntaxKind.IfKeyword },
            { "implicit", SyntaxKind.ImplicitKeyword },
            { "in", SyntaxKind.InKeyword },
            { "int", SyntaxKind.IntKeyword },
            { "interface", SyntaxKind.InterfaceKeyword },
            { "internal", SyntaxKind.InternalKeyword },
            { "is", SyntaxKind.IsKeyword },
            { "lock", SyntaxKind.LockKeyword },
            { "long", SyntaxKind.LongKeyword },
            { "namespace", SyntaxKind.NamespaceKeyword },
            { "new", SyntaxKind.NewKeyword },
            { "null", SyntaxKind.NullKeyword },
            { "object", SyntaxKind.ObjectKeyword },
            { "operator", SyntaxKind.OperatorKeyword },
            { "out", SyntaxKind.OutKeyword },
            { "override", SyntaxKind.OverrideKeyword },
            { "params", SyntaxKind.ParamsKeyword },
            { "private", SyntaxKind.PrivateKeyword },
            { "protected", SyntaxKind.ProtectedKeyword },
            { "public", SyntaxKind.PublicKeyword },
            { "readonly", SyntaxKind.ReadOnlyKeyword },
            { "ref", SyntaxKind.RefKeyword },
            { "return", SyntaxKind.ReturnKeyword },
            { "sbyte", SyntaxKind.SByteKeyword },
            { "sealed", SyntaxKind.SealedKeyword },
            { "short", SyntaxKind.ShortKeyword },
            { "sizeof", SyntaxKind.SizeOfKeyword },
            { "stackalloc", SyntaxKind.StackAllocKeyword },
            { "static", SyntaxKind.StaticKeyword },
            { "string", SyntaxKind.StringKeyword },
            { "struct", SyntaxKind.StructKeyword },
            { "switch", SyntaxKind.SwitchKeyword },
            { "this", SyntaxKind.ThisKeyword },
            { "throw", SyntaxKind.ThrowKeyword },
            { "true", SyntaxKind.TrueKeyword },
            { "try", SyntaxKind.TryKeyword },
            { "typeof", SyntaxKind.TypeOfKeyword },
            { "uint", SyntaxKind.UIntKeyword },
            { "ulong", SyntaxKind.ULongKeyword },
            { "unchecked", SyntaxKind.UncheckedKeyword },
            { "unsafe", SyntaxKind.UnsafeKeyword },
            { "ushort", SyntaxKind.UShortKeyword },
            { "using", SyntaxKind.UsingKeyword },
            { "virtual", SyntaxKind.VirtualKeyword },
            { "void", SyntaxKind.VoidKeyword },
            { "volatile", SyntaxKind.VolatileKeyword },
            { "while", SyntaxKind.WhileKeyword }
        };
    }
}